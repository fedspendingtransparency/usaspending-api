# Generated by Django 3.2.15 on 2023-02-17 17:22
import logging

from django.core.management import call_command
from django.db import migrations

_index_template_suffix = "index_template"

logger = logging.getLogger(__name__)


class Migration(migrations.Migration):
    # call_command(...) issued from RunPython operations does not seem to have insight into the transaction state from
    # prior RunSQL operations. So in order to see tables or DB objects being created or dropped by prior RunSQL steps,
    # the migration steps need to be made non-atomic
    atomic = False

    dependencies = [
        ("search", "0022_partition_transaction_search_pt2_load_data"),
    ]

    operations = [
        # STEP 1: Copy all template metadata on to the partition table, as "virtual" indexes/constraints
        #         Using the --only-parent-partitioned-table flag will apply them ONLY to the parent partition table
        #         Then also apply them directly to each partition, and finally ATTACH them to the parent metadata
        migrations.RunPython(
            code=lambda apps, _: call_command(
                "copy_table_metadata",
                f"--source-table=temp.transaction_search_{_index_template_suffix}",
                "--dest-table=temp.transaction_search_temp",
                "--dest-suffix=temp",
                f"--source-suffix={_index_template_suffix}",
                "--only-parent-partitioned-table",
                "--index-concurrency=15",
            ),
            reverse_code=lambda apps, _: call_command(
                "drop_table_metadata",
                "--table=temp.transaction_search_temp",
            ),
        ),
        migrations.RunPython(
            code=lambda apps, _: call_command(
                "copy_table_metadata",
                f"--source-table=temp.transaction_search_{_index_template_suffix}",
                "--dest-table=temp.transaction_search_fpds_temp",
                f"--source-suffix={_index_template_suffix}",
                "--dest-suffix=fpds_temp",
                "--partition-of=temp.transaction_search_temp",
                "--index-concurrency=15",
            ),
            reverse_code=lambda apps, _: call_command(
                "drop_table_metadata",
                "--table=temp.transaction_search_fpds_temp",
                "--is-potential-partition",
            ),
        ),
        migrations.RunPython(
            code=lambda apps, _: call_command(
                "copy_table_metadata",
                f"--source-table=temp.transaction_search_{_index_template_suffix}",
                "--dest-table=temp.transaction_search_fabs_temp",
                f"--source-suffix={_index_template_suffix}",
                "--dest-suffix=fabs_temp",
                "--partition-of=temp.transaction_search_temp",
                "--index-concurrency=15",
            ),
            reverse_code=lambda apps, _: call_command(
                "drop_table_metadata",
                "--table=temp.transaction_search_fabs_temp",
                "--is-potential-partition",
            ),
        ),

        # STEP 2: Create empty/placeholder partitions for the to-be partitioned rpt.transaction_search in the rpt schema
        migrations.RunSQL(
            sql=f"""
                CREATE TABLE rpt.transaction_search_fabs (LIKE temp.transaction_search_fabs_temp);
                CREATE TABLE rpt.transaction_search_fpds (LIKE temp.transaction_search_fpds_temp);
            """,
            reverse_sql=f"""
                DROP TABLE IF EXISTS rpt.transaction_search_fabs;
                DROP TABLE IF EXISTS rpt.transaction_search_fpds;
            """,
        ),

        # STEP 3: Copy the metadata from the temp partitions to these new placeholder partitions, so that their
        # metadata matches (except for _temp suffix on the source names), which will allow a swap to take place
        migrations.RunPython(
            code=lambda apps, _: call_command(
                "copy_table_metadata",
                f"--source-table=temp.transaction_search_fabs_temp",
                "--dest-table=rpt.transaction_search_fabs",
                f"--source-suffix=temp",
                "--dest-suffix",
                "--index-concurrency=15",
            ),
            reverse_code=lambda apps, _: call_command(
                "drop_table_metadata",
                "--table=rpt.transaction_search_fabs",
                "--is-potential-partition",
            ),
        ),
        migrations.RunPython(
            code=lambda apps, _: call_command(
                "copy_table_metadata",
                f"--source-table=temp.transaction_search_fpds_temp",
                "--dest-table=rpt.transaction_search_fpds",
                f"--source-suffix=temp",
                "--dest-suffix",
                "--index-concurrency=15",
            ),
            reverse_code=lambda apps, _: call_command(
                "drop_table_metadata",
                "--table=rpt.transaction_search_fpds",
                "--is-potential-partition",
            ),
        ),
    ]
