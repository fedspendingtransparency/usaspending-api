{
  "final_name": "summary_view_cfda_number",
  "refresh": true,
  "matview_sql": [
    "SELECT",
    "  -- Deterministic Unique Hash (DUH) created for view concurrent refresh",
    "  MD5(array_to_string(sort(array_agg(transaction_normalized.id::int)), ' '))::uuid AS duh,",
    "  transaction_normalized.action_date,",
    "  transaction_normalized.fiscal_year,",
    "  transaction_normalized.type,",
    "  transaction_fpds.pulled_from,",
    "  transaction_fabs.cfda_number,",
    "  transaction_fabs.cfda_title,",
    "",
    "  SUM(COALESCE(CASE",
    "    WHEN transaction_normalized.type IN('07','08') THEN transaction_normalized.original_loan_subsidy_cost",
    "    ELSE transaction_normalized.federal_action_obligation",
    "  END, 0)::NUMERIC(23, 2))::NUMERIC(23, 2) AS generated_pragmatic_obligation,",
    "  SUM(COALESCE(transaction_normalized.federal_action_obligation, 0))::NUMERIC(23, 2) AS federal_action_obligation,",
    "  SUM(COALESCE(transaction_normalized.original_loan_subsidy_cost, 0))::NUMERIC(23, 2) AS original_loan_subsidy_cost,",
    "  SUM(COALESCE(transaction_normalized.face_value_loan_guarantee, 0))::NUMERIC(23, 2) AS face_value_loan_guarantee,",
    "  COUNT(*) counts",
    "FROM",
    "  transaction_normalized",
    "LEFT OUTER JOIN",
    "  transaction_fabs ON (transaction_normalized.id = transaction_fabs.transaction_id)",
    "LEFT OUTER JOIN",
    "  transaction_fpds ON (transaction_normalized.id = transaction_fpds.transaction_id)",
    "WHERE",
    "  transaction_normalized.action_date >= '2007-10-01'",
    "GROUP BY",
    "  transaction_normalized.action_date,",
    "  transaction_normalized.fiscal_year,",
    "  transaction_normalized.type,",
    "  transaction_fpds.pulled_from,",
    "  transaction_fabs.cfda_number,",
    "  transaction_fabs.cfda_title"
  ],
  "indexes": [
    {
      "name": "deterministic_unique_hash",
      "unique": true,
      "columns": [{"name": "duh"}]
    }, {
      "name": "action_date",
      "columns": [{"name": "action_date", "order": "DESC NULLS LAST"}]
    }, {
      "name": "type",
      "columns": [{"name": "type"}]
    }, {
      "name": "pulled_from",
      "where": "pulled_from IS NOT NULL",
      "columns": [{"name": "pulled_from"}]
    }
  ]
}
