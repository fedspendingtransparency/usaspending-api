# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2019-07-23 18:28
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('awards', '0056_transaction_officer_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='TransactionNormalizedChangeTracker',
            fields=[
                ('transaction_id', models.BigIntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'transaction_normalized_change_tracker',
            },
        ),
        migrations.RunSQL(
            ["""
                create or replace function record_transaction_change() returns trigger as $$
                begin
                    -- We do not care what kind of change it is, just log the id.  K.I.S.S.
                    if tg_op = 'INSERT' then
                        insert into transaction_normalized_change_tracker (transaction_id)
                        values (new.id) on conflict do nothing;
                    else
                        insert into transaction_normalized_change_tracker (transaction_id)
                        values (old.id) on conflict do nothing;
                    end if;
                    return new;
                end;
                $$ language plpgsql
            """],
            ["drop function if exists record_transaction_change cascade"]
        ),
        migrations.RunSQL(
            ["""
                create trigger record_transaction_change_trigger
                after insert or update or delete on transaction_normalized
                for each row execute procedure record_transaction_change()
            """],
            ["drop trigger if exists record_transaction_change_trigger on transaction_normalized cascade"]
        ),
        migrations.CreateModel(
            name='UniversalTransactionTableView',
            fields=[
                ('keyword_ts_vector', django.contrib.postgres.search.SearchVectorField()),
                ('award_ts_vector', django.contrib.postgres.search.SearchVectorField()),
                ('recipient_name_ts_vector', django.contrib.postgres.search.SearchVectorField()),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='awards.TransactionNormalized')),
                ('action_date', models.DateField(blank=True)),
                ('last_modified_date', models.DateField(blank=True)),
                ('fiscal_year', models.IntegerField()),
                ('type', models.TextField(blank=True, null=True)),
                ('action_type', models.TextField()),
                ('award_category', models.TextField()),
                ('generated_pragmatic_obligation', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('total_obligation', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('total_subsidy_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('total_loan_value', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('total_obl_bin', models.TextField()),
                ('fain', models.TextField()),
                ('uri', models.TextField()),
                ('piid', models.TextField()),
                ('federal_action_obligation', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('original_loan_subsidy_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('face_value_loan_guarantee', models.DecimalField(blank=True, decimal_places=2, max_digits=23, null=True)),
                ('transaction_description', models.TextField()),
                ('modification_number', models.TextField()),
                ('pop_country_code', models.TextField()),
                ('pop_country_name', models.TextField()),
                ('pop_state_code', models.TextField()),
                ('pop_county_code', models.TextField()),
                ('pop_county_name', models.TextField()),
                ('pop_zip5', models.TextField()),
                ('pop_congressional_code', models.TextField()),
                ('pop_city_name', models.TextField()),
                ('recipient_location_country_code', models.TextField()),
                ('recipient_location_country_name', models.TextField()),
                ('recipient_location_state_code', models.TextField()),
                ('recipient_location_county_code', models.TextField()),
                ('recipient_location_county_name', models.TextField()),
                ('recipient_location_zip5', models.TextField()),
                ('recipient_location_congressional_code', models.TextField()),
                ('recipient_location_city_name', models.TextField()),
                ('naics_code', models.TextField()),
                ('naics_description', models.TextField()),
                ('product_or_service_code', models.TextField()),
                ('product_or_service_description', models.TextField()),
                ('pulled_from', models.TextField()),
                ('type_of_contract_pricing', models.TextField()),
                ('type_set_aside', models.TextField()),
                ('extent_competed', models.TextField()),
                ('cfda_number', models.TextField()),
                ('cfda_title', models.TextField()),
                ('recipient_hash', models.UUIDField()),
                ('recipient_name', models.TextField()),
                ('recipient_unique_id', models.TextField()),
                ('parent_recipient_unique_id', models.TextField()),
                ('business_categories', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('awarding_toptier_agency_name', models.TextField()),
                ('funding_toptier_agency_name', models.TextField()),
                ('awarding_subtier_agency_name', models.TextField()),
                ('funding_subtier_agency_name', models.TextField()),
                ('awarding_toptier_agency_abbreviation', models.TextField()),
                ('funding_toptier_agency_abbreviation', models.TextField()),
                ('awarding_subtier_agency_abbreviation', models.TextField()),
                ('funding_subtier_agency_abbreviation', models.TextField()),
            ],
            options={
                'db_table': 'universal_transaction_tableview',
                'managed': False,
            },
        ),
    ]
